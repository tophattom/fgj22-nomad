[gd_scene load_steps=15 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://Prefabs/StatusIcon.tscn" type="PackedScene" id=2]
[ext_resource path="res://Prefabs/HealthBar.tscn" type="PackedScene" id=3]
[ext_resource path="res://Sprites/GUI/Kid_75-100.png" type="Texture" id=4]
[ext_resource path="res://Prefabs/PrefabScripts/CharacterDisplay.gd" type="Script" id=5]
[ext_resource path="res://Sprites/GUI/Kid_50-75.png" type="Texture" id=6]
[ext_resource path="res://Sprites/GUI/Kid_0-25.png" type="Texture" id=7]
[ext_resource path="res://Sprites/GUI/Kid_25-50.png" type="Texture" id=8]
[ext_resource path="res://Sprites/GUI/Poison.png" type="Texture" id=9]
[ext_resource path="res://Sprites/GUI/Injury.png" type="Texture" id=10]
[ext_resource path="res://Sprites/GUI/Thirst.png" type="Texture" id=11]
[ext_resource path="res://Sprites/GUI/Hunger.png" type="Texture" id=12]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/width = 1.0
shader_param/pattern = 0
shader_param/inside = false
shader_param/add_margins = true

[node name="CharacterDisplay" type="Node2D"]
position = Vector2( 12, 10 )
script = ExtResource( 5 )
icon_25 = ExtResource( 7 )
icon_50 = ExtResource( 8 )
icon_75 = ExtResource( 6 )
icon_100 = ExtResource( 4 )

[node name="CharacterIcon" type="TextureRect" parent="."]
material = SubResource( 2 )
use_parent_material = true
margin_right = 1340.0
margin_bottom = 1240.0
rect_scale = Vector2( 0.1, 0.1 )
texture = ExtResource( 1 )
expand = true
stretch_mode = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HealthBar" parent="." instance=ExtResource( 3 )]
position = Vector2( 7, 133 )

[node name="Thirsty" parent="." instance=ExtResource( 2 )]
position = Vector2( 10, 153 )
scale = Vector2( 0.25, 0.25 )
icon = ExtResource( 11 )

[node name="Hungry" parent="." instance=ExtResource( 2 )]
position = Vector2( 42, 154 )
scale = Vector2( 0.25, 0.25 )
icon = ExtResource( 12 )

[node name="Injury" parent="." instance=ExtResource( 2 )]
position = Vector2( 73, 154 )
scale = Vector2( 0.25, 0.25 )
icon = ExtResource( 10 )

[node name="Poison" parent="." instance=ExtResource( 2 )]
position = Vector2( 104, 153 )
scale = Vector2( 0.25, 0.25 )
icon = ExtResource( 9 )
